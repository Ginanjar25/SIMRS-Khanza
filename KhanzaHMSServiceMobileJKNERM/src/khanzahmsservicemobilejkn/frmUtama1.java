/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package khanzahmsservicemobilejkn;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import fungsi.ApiMobileJKN;
import fungsi.koneksiDB;
import fungsi.sekuel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.Timer;
import org.apache.commons.lang.StringUtils;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;

/**
 *
 * @author windiartonugroho
 */
public class frmUtama1 extends javax.swing.JFrame {

    private Connection koneksi = koneksiDB.condb();
    private sekuel Sequel = new sekuel();
    private String requestJson, URL = "", utc = "", link = "", datajam = "", datasoap = "", cekTask345 = "",
            nol_jam = "", nol_menit = "", nol_detik = "", jam = "", menit = "", detik = "", hari = "", noresep = "", task3 = "", task4 = "", task5 = "", task6 = "", task7 = "", task99 = "",
            kodepoli = "", kodedokter = "", kodebpjs = Sequel.cariIsi("select password_asuransi.kd_pj from password_asuransi");
    private ApiMobileJKN api = new ApiMobileJKN();
    private HttpHeaders headers;
    private HttpEntity requestEntity;
    private ObjectMapper mapper = new ObjectMapper();
    private JsonNode root;
    private JsonNode nameNode;
    private JsonNode response;
    private int i=0;
    private PreparedStatement ps, ps2, ps3;
    private ResultSet rs, rs2, rs3;
    private Calendar cal = Calendar.getInstance();
    private int day = cal.get(Calendar.DAY_OF_WEEK);
    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private SimpleDateFormat tanggalFormat = new SimpleDateFormat("yyyy-MM-dd");
    private Date parsedDate;
    private Date date = new Date();

    /**
     * Creates new form frmUtama
     */
    public frmUtama1() {
        initComponents();
        try {
            link = koneksiDB.URLAPIMOBILEJKN();
        } catch (Exception e) {
            System.out.println("E : " + e);
        }

        this.setSize(390, 340);

        date = new Date();
        Tanggal1.setText(tanggalFormat.format(date));
        Tanggal2.setText(tanggalFormat.format(date));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TeksArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Tanggal1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Tanggal2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SIMKES Khanza Service Mobile JKN");

        TeksArea.setColumns(20);
        TeksArea.setRows(5);
        jScrollPane1.setViewportView(TeksArea);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Tanggal :");
        jLabel1.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel1.add(jLabel1);

        Tanggal1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(Tanggal1);

        jLabel3.setText("s.d.");
        jLabel3.setPreferredSize(new java.awt.Dimension(28, 23));
        jPanel1.add(jLabel3);

        Tanggal2.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(Tanggal2);

        jLabel2.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel1.add(jLabel2);

        jButton1.setText("Keluar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        jButton2.setText("Kirim");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        cektask3();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmUtama1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmUtama1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmUtama1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmUtama1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmUtama1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Tanggal1;
    private javax.swing.JTextField Tanggal2;
    private javax.swing.JTextArea TeksArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    private void cektask3() {
        String KdBook = "2024/07/19/000053";
        try {
            headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
            utc = String.valueOf(api.GetUTCdatetimeAsString());
            headers.add("x-timestamp", utc);
            headers.add("x-signature", api.getHmac(utc));
            headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
            requestJson = "{"
                    + "\"kodebooking\": \"" + KdBook + "\""
                    + "}";
            //TeksArea.append("JSON : " + requestJson + "\n");
            requestEntity = new HttpEntity(requestJson, headers);
            URL = link + "/antrean/getlisttask";
            System.out.println("URL : " + URL);            
            root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
            nameNode = root.path("response");
            response = mapper.readTree(api.Decrypt(root.path("response").asText(), utc)).path("list");
            //System.out.println(response);
            if (response.isArray()) {
                i = 1;
                for (JsonNode list : response) {
                    TeksArea.append(list.path("taskid").asText() + "\n");
                    i++;
                }
            }
            //TeksArea.setText(nameNode.asText());
        } catch (Exception ex) {
            //System.out.println("Notifikasi Bridging : " + ex);
        }
    }
    private void jam() {
        if (1 == 1) {
            day = cal.get(Calendar.DAY_OF_WEEK);
            switch (day) {
                case 1:
                    hari = "AKHAD";
                    break;
                case 2:
                    hari = "SENIN";
                    break;
                case 3:
                    hari = "SELASA";
                    break;
                case 4:
                    hari = "RABU";
                    break;
                case 5:
                    hari = "KAMIS";
                    break;
                case 6:
                    hari = "JUMAT";
                    break;
                case 7:
                    hari = "SABTU";
                    break;
                default:
                    break;
            }

            try {
                koneksi = koneksiDB.condb();
                TeksArea.append("Menjalankan WS tambah antrian Mobile JKN Pasien BPJS\n");

                //pasien Non JKN================================================================================================================================================================
                TeksArea.append("Menjalankan WS tambah antrian Mobile JKN Pasien Non BPJS/BJS Onsite\n");
                ps = koneksi.prepareStatement(
                        "select reg_periksa.no_reg,reg_periksa.no_rawat,reg_periksa.tgl_registrasi,reg_periksa.kd_dokter,dokter.nm_dokter,reg_periksa.kd_poli,poliklinik.nm_poli,reg_periksa.stts_daftar,reg_periksa.no_rkm_medis,reg_periksa.kd_pj "
                        + "from reg_periksa inner join dokter on reg_periksa.kd_dokter=dokter.kd_dokter inner join poliklinik on reg_periksa.kd_poli=poliklinik.kd_poli where reg_periksa.tgl_registrasi between '" + Tanggal1.getText() + "' and '" + Tanggal2.getText() + "' "
                        + "and reg_periksa.no_rawat not in (select referensi_mobilejkn_bpjs.no_rawat from referensi_mobilejkn_bpjs where referensi_mobilejkn_bpjs.tanggalperiksa between '" + Tanggal1.getText() + "' and '" + Tanggal2.getText() + "') "
                        + "order by concat(reg_periksa.tgl_registrasi,' ',reg_periksa.jam_reg)");
                try {
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        ps2 = koneksi.prepareStatement("select * from jadwal where jadwal.hari_kerja=? and jadwal.kd_dokter=? and jadwal.kd_poli=?");
                        try {
                            ps2.setString(1, hari);
                            ps2.setString(2, rs.getString("kd_dokter"));
                            ps2.setString(3, rs.getString("kd_poli"));
                            rs2 = ps2.executeQuery();
                            if (rs2.next()) {
                                kodedokter = Sequel.cariIsi("select maping_dokter_dpjpvclaim.kd_dokter_bpjs from maping_dokter_dpjpvclaim where maping_dokter_dpjpvclaim.kd_dokter=?", rs.getString("kd_dokter"));
                                kodepoli = Sequel.cariIsi("select maping_poli_bpjs.kd_poli_bpjs from maping_poli_bpjs where maping_poli_bpjs.kd_poli_rs=?", rs.getString("kd_poli"));
                                if ((!kodedokter.equals("")) && (!kodepoli.equals(""))) {
                                    task3 = "";
                                    task4 = "";
                                    task5 = "";
                                    task6 = "";
                                    task7 = "";
                                    task99 = "";
                                    ps3 = koneksi.prepareStatement("select referensi_mobilejkn_bpjs_taskid.taskid, referensi_mobilejkn_bpjs_taskid.statuskirim from referensi_mobilejkn_bpjs_taskid where referensi_mobilejkn_bpjs_taskid.no_rawat=?");
                                    try {
                                        ps3.setString(1, rs.getString("no_rawat"));
                                        rs3 = ps3.executeQuery();
                                        while (rs3.next()) {
                                            if (rs3.getString("taskid").equals("3") && rs3.getString("statuskirim").equals("Sudah")) {
                                                task3 = "Sudah";
                                            }
                                            if (rs3.getString("taskid").equals("4") && rs3.getString("statuskirim").equals("Sudah")) {
                                                task4 = "Sudah";
                                            }
                                            if (rs3.getString("taskid").equals("5") && rs3.getString("statuskirim").equals("Sudah")) {
                                                task5 = "Sudah";
                                            }
                                            if (rs3.getString("taskid").equals("6") && rs3.getString("statuskirim").equals("Sudah")) {
                                                task6 = "Sudah";
                                            }
                                            if (rs3.getString("taskid").equals("7") && rs3.getString("statuskirim").equals("Sudah")) {
                                                task7 = "Sudah";
                                            }
                                            if (rs3.getString("taskid").equals("99") && rs3.getString("statuskirim").equals("Sudah")) {
                                                task99 = "Sudah";
                                            }
                                        }
                                    } catch (Exception ex) {
                                        System.out.println("Notif : " + ex);
                                    } finally {
                                        if (rs3 != null) {
                                            rs3.close();
                                        }
                                        if (ps3 != null) {
                                            ps3.close();
                                        }
                                    }

                                    if (task3.equals("")) {
                                        
                                        //datajam=Sequel.cariIsi("select if(concat(reg_periksa.tgl_registrasi,' ',reg_periksa.jam_reg)>concat('"+rs.getString("tgl_registrasi")+"',' ','"+rs2.getString("jam_mulai")+"'),concat(reg_periksa.tgl_registrasi,' ',reg_periksa.jam_reg),concat('"+rs.getString("tgl_registrasi")+"',' ','"+rs2.getString("jam_mulai")+"')) as tanggal from reg_periksa where reg_periksa.no_rawat=?",rs.getString("no_rawat"));
                                        datasoap = Sequel.cariIsi("SELECT if(concat(pemeriksaan_ralan.tgl_perawatan,' ',pemeriksaan_ralan.jam_rawat) < concat(pemeriksaan_ralan.tgl_perawatan,' ', '" + rs2.getString("jam_mulai") + "'),\"True\",\"False\" ) AS hsl \n"
                                                + "from pemeriksaan_ralan where pemeriksaan_ralan.no_rawat= '" + rs.getString("no_rawat") + "'");
                                        if (datasoap.equals("")) {
                                            datajam = "";
                                        }
                                        if (datasoap.equals("False")) {
                                            datajam = Sequel.cariIsi("select if(concat(reg_periksa.tgl_registrasi,' ',reg_periksa.jam_reg)>concat('" + rs.getString("tgl_registrasi") + "',' ','" + rs2.getString("jam_mulai") + "'),concat(reg_periksa.tgl_registrasi,' ',reg_periksa.jam_reg),concat('" + rs.getString("tgl_registrasi") + "',' ','" + rs2.getString("jam_mulai") + "')) as tanggal from reg_periksa where reg_periksa.no_rawat=?", rs.getString("no_rawat"));
                                        }
                                        if (datasoap.equals("True")) {
                                            datajam = Sequel.cariIsi("SELECT concat(pemeriksaan_ralan.tgl_perawatan,' ',DATE_ADD(pemeriksaan_ralan.jam_rawat,INTERVAL FLOOR(RAND()*(50-70)+70)*-1 MINUTE)) from pemeriksaan_ralan where pemeriksaan_ralan.no_rawat='" + rs.getString("no_rawat") + "'");
                                        }
                                        if (!datajam.equals("")) {
                                            Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?,?,?,?", "task id", 6, new String[]{rs.getString("no_rawat"), "3", datajam, "Sudah", "", ""});
                                            parsedDate = dateFormat.parse(datajam);
                                            try {
                                                TeksArea.append("Menjalankan WS taskid mulai tunggu poli Mobile JKN Pasien Non BPJS/BPS Onsite\n");
                                                headers = new HttpHeaders();
                                                headers.setContentType(MediaType.APPLICATION_JSON);
                                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                headers.add("x-timestamp", utc);
                                                headers.add("x-signature", api.getHmac(utc));
                                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                requestJson = "{"
                                                        + "\"kodebooking\": \"" + rs.getString("no_rawat") + "\","
                                                        + "\"taskid\": \"3\","
                                                        + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                                        + "}";
                                                TeksArea.append("JSON : " + requestJson + "\n");
                                                requestEntity = new HttpEntity(requestJson, headers);
                                                URL = link + "/antrean/updatewaktu";
                                                System.out.println("URL : " + URL);
                                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                nameNode = root.path("metadata");
                                                if (nameNode.path("code").asText().equals("200") || nameNode.path("code").asText().equals("208") || nameNode.path("message").asText().equals("Ok.")) {
                                                    Sequel.queryu2("update referensi_mobilejkn_bpjs_taskid set statuskirim='Sudah' where taskid='3' and no_rawat='" + rs.getString("no_rawat") + "'");
                                                } else {
                                                    Sequel.queryu2("update referensi_mobilejkn_bpjs_taskid set statuskirim='Belum' where taskid='3' and no_rawat='" + rs.getString("no_rawat") + "'");
                                                }
                                                TeksArea.append("respon WS BPJS : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                                                Sequel.queryu2("update referensi_mobilejkn_bpjs_taskid set waktu='" + datajam + "', stts_code='" + nameNode.path("code").asText() + "', message='" + nameNode.path("message").asText() + "' where taskid='3' and no_rawat='" + rs.getString("no_rawat") + "'");
                                            } catch (Exception ex) {
                                                System.out.println("Notifikasi Bridging : " + ex);
                                            }
                                        }
                                    }

                                    if (task4.equals("")) {
                                        datajam = Sequel.cariIsi("select concat(pemeriksaan_ralan.tgl_perawatan,' ',pemeriksaan_ralan.jam_rawat) from pemeriksaan_ralan where pemeriksaan_ralan.no_rawat=?", rs.getString("no_rawat"));
//                                                if (datajam.equals("")) {
//                                                    datajam = Sequel.cariIsi("select if(mutasi_berkas.diterima='0000-00-00 00:00:00','',mutasi_berkas.diterima) from mutasi_berkas where mutasi_berkas.no_rawat=?", rs.getString("no_rawat"));
//                                                }
                                        if (!datajam.equals("")) {
                                            Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?,?,?,?", "task id", 6, new String[]{rs.getString("no_rawat"), "4", datajam, "Sudah", "", ""});
                                            parsedDate = dateFormat.parse(datajam);
                                            try {
                                                TeksArea.append("Menjalankan WS taskid mulai pelayanan poli Mobile JKN Pasien Non BPJS/BPS Onsite\n");
                                                headers = new HttpHeaders();
                                                headers.setContentType(MediaType.APPLICATION_JSON);
                                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                headers.add("x-timestamp", utc);
                                                headers.add("x-signature", api.getHmac(utc));
                                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                requestJson = "{"
                                                        + "\"kodebooking\": \"" + rs.getString("no_rawat") + "\","
                                                        + "\"taskid\": \"4\","
                                                        + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                                        + "}";
                                                TeksArea.append("JSON : " + requestJson + "\n");
                                                requestEntity = new HttpEntity(requestJson, headers);
                                                URL = link + "/antrean/updatewaktu";
                                                System.out.println("URL : " + URL);
                                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                nameNode = root.path("metadata");
                                                if (nameNode.path("code").asText().equals("200") || nameNode.path("code").asText().equals("208") || nameNode.path("message").asText().equals("Ok.")) {
                                                    Sequel.queryu2("update referensi_mobilejkn_bpjs_taskid set statuskirim='Sudah' where taskid='4' and no_rawat='" + rs.getString("no_rawat") + "'");
                                                } else {
                                                    Sequel.queryu2("update referensi_mobilejkn_bpjs_taskid set statuskirim='Belum' where taskid='4' and no_rawat='" + rs.getString("no_rawat") + "'");
                                                }
                                                TeksArea.append("respon WS BPJS : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                                                Sequel.queryu2("update referensi_mobilejkn_bpjs_taskid set waktu='" + datajam + "', stts_code='" + nameNode.path("code").asText() + "', message='" + nameNode.path("message").asText() + "' where taskid='4' and no_rawat='" + rs.getString("no_rawat") + "'");
                                            } catch (Exception ex) {
                                                System.out.println("Notifikasi Bridging : " + ex);
                                            }
                                        }
                                    }

                                    if (task5.equals("")) {
                                        datajam = Sequel.cariIsi("select DATE_ADD(concat(pemeriksaan_ralan.tgl_perawatan,' ',pemeriksaan_ralan.jam_rawat),interval 1 minute) from pemeriksaan_ralan where pemeriksaan_ralan.no_rawat=?", rs.getString("no_rawat"));
                                        if (!datajam.equals("")) {
                                            Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?,?,?,?", "task id", 6, new String[]{rs.getString("no_rawat"), "5", datajam, "Sudah", "", ""});
                                            parsedDate = dateFormat.parse(datajam);
                                            try {
                                                TeksArea.append("Menjalankan WS taskid selesai pelayanan poli Mobile JKN Pasien Non BPJS/BPS Onsite\n");
                                                headers = new HttpHeaders();
                                                headers.setContentType(MediaType.APPLICATION_JSON);
                                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                headers.add("x-timestamp", utc);
                                                headers.add("x-signature", api.getHmac(utc));
                                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                requestJson = "{"
                                                        + "\"kodebooking\": \"" + rs.getString("no_rawat") + "\","
                                                        + "\"taskid\": \"5\","
                                                        + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                                        + "}";
                                                TeksArea.append("JSON : " + requestJson + "\n");
                                                requestEntity = new HttpEntity(requestJson, headers);
                                                URL = link + "/antrean/updatewaktu";
                                                System.out.println("URL : " + URL);
                                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                nameNode = root.path("metadata");
                                                if (nameNode.path("code").asText().equals("200") || nameNode.path("code").asText().equals("208") || nameNode.path("message").asText().equals("Ok.")) {
                                                    Sequel.queryu2("update referensi_mobilejkn_bpjs_taskid set statuskirim='Sudah' where taskid='5' and no_rawat='" + rs.getString("no_rawat") + "'");
                                                } else {
                                                    Sequel.queryu2("update referensi_mobilejkn_bpjs_taskid set statuskirim='Belum' where taskid='5' and no_rawat='" + rs.getString("no_rawat") + "'");
                                                }
                                                TeksArea.append("respon WS BPJS : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                                                Sequel.queryu2("update referensi_mobilejkn_bpjs_taskid set waktu='" + datajam + "', stts_code='" + nameNode.path("code").asText() + "', message='" + nameNode.path("message").asText() + "' where taskid='5' and no_rawat='" + rs.getString("no_rawat") + "'");
                                            } catch (Exception ex) {
                                                System.out.println("Notifikasi Bridging : " + ex);
                                            }
                                        }
                                    }

                                    cekTask345 = Sequel.cariIsi("SELECT COUNT(ts.taskid) FROM referensi_mobilejkn_bpjs_taskid ts WHERE ts.taskid IN ('3','4','5') AND  ts.statuskirim = 'Sudah' and ts.no_rawat =?", rs.getString("no_rawat"));
                                    if (task6.equals("") && !cekTask345.equals("")) {
                                        noresep = Sequel.cariIsi("select resep_obat.no_resep from resep_obat where resep_obat.no_rawat=?", rs.getString("no_rawat"));
                                        if (!noresep.equals("")) {
                                            try {
                                                TeksArea.append("Menjalankan WS tambah antrian farmasi Mobile JKN Pasien Non BPJS/BPS Onsite\n");
                                                headers = new HttpHeaders();
                                                headers.setContentType(MediaType.APPLICATION_JSON);
                                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                headers.add("x-timestamp", utc);
                                                headers.add("x-signature", api.getHmac(utc));
                                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                requestJson = "{"
                                                        + "\"kodebooking\": \"" + rs.getString("no_rawat") + "\","
                                                        + "\"jenisresep\": \"" + (Sequel.cariInteger("select count(resep_dokter_racikan.no_resep) from resep_dokter_racikan where resep_dokter_racikan.no_resep=?", noresep) > 0 ? "Racikan" : "Non Racikan") + "\","
                                                        + "\"nomorantrean\": " + Integer.parseInt(StringUtils.right(noresep, 4)) + ","
                                                        + "\"keterangan\": \"Resep dibuat secara elektronik di poli\""
                                                        + "}";
                                                TeksArea.append("JSON : " + requestJson + "\n");
                                                requestEntity = new HttpEntity(requestJson, headers);
                                                URL = link + "/antrean/farmasi/add";
                                                System.out.println("URL : " + URL);
                                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                nameNode = root.path("metadata");
                                                TeksArea.append("respon WS BPJS : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                                            } catch (Exception ex) {
                                                System.out.println("Notifikasi Bridging : " + ex);
                                            }
                                        }

                                        String dataSoap = "";
                                        String dataResep = "";
                                        String isOverlap = "";
                                        String selisih = "";
                                        dataSoap = datajam;
                                        dataResep = Sequel.cariIsi("select concat(resep_obat.tgl_peresepan,' ',resep_obat.jam_peresepan) from resep_obat where resep_obat.tgl_peresepan<>'0000-00-00' and resep_obat.status='ralan' and resep_obat.no_rawat=?", rs.getString("no_rawat"));
                                        isOverlap = Sequel.cariIsi("SELECT IF('" + dataSoap + "'>='" + dataResep + "','Y','N')");
                                        if (isOverlap.equals("Y") && !dataResep.equals("")) {
                                            datajam = Sequel.cariIsi("select DATE_ADD(concat(pemeriksaan_ralan.tgl_perawatan,' ',pemeriksaan_ralan.jam_rawat),interval FLOOR(RAND()*(2-5)+5) minute) from pemeriksaan_ralan where pemeriksaan_ralan.no_rawat=?", rs.getString("no_rawat"));
                                        } else {
                                            datajam = Sequel.cariIsi("select concat(resep_obat.tgl_peresepan,' ',resep_obat.jam_peresepan) from resep_obat where resep_obat.tgl_peresepan<>'0000-00-00' and resep_obat.status='ralan' and resep_obat.no_rawat=?", rs.getString("no_rawat"));
                                        }
                                        if (!datajam.equals("")) {
                                            Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?,?,?,?", "task id", 6, new String[]{rs.getString("no_rawat"), "6", datajam, "Sudah", "", ""});
                                            parsedDate = dateFormat.parse(datajam);
                                            try {
                                                TeksArea.append("Menjalankan WS taskid permintaan resep poli Mobile JKN Pasien Non BPJS/BPS Onsite\n");
                                                headers = new HttpHeaders();
                                                headers.setContentType(MediaType.APPLICATION_JSON);
                                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                headers.add("x-timestamp", utc);
                                                headers.add("x-signature", api.getHmac(utc));
                                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                requestJson = "{"
                                                        + "\"kodebooking\": \"" + rs.getString("no_rawat") + "\","
                                                        + "\"taskid\": \"6\","
                                                        + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                                        + "}";
                                                TeksArea.append("JSON : " + requestJson + "\n");
                                                requestEntity = new HttpEntity(requestJson, headers);
                                                URL = link + "/antrean/updatewaktu";
                                                System.out.println("URL : " + URL);
                                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                nameNode = root.path("metadata");
                                                if (nameNode.path("code").asText().equals("200") || nameNode.path("code").asText().equals("208") || nameNode.path("message").asText().equals("Ok.")) {
                                                    Sequel.queryu2("update referensi_mobilejkn_bpjs_taskid set statuskirim='Sudah' where taskid='6' and no_rawat='" + rs.getString("no_rawat") + "'");
                                                } else {
                                                    Sequel.queryu2("update referensi_mobilejkn_bpjs_taskid set statuskirim='Belum' where taskid='6' and no_rawat='" + rs.getString("no_rawat") + "'");
                                                }
                                                TeksArea.append("respon WS BPJS : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                                                Sequel.queryu2("update referensi_mobilejkn_bpjs_taskid set waktu='" + datajam + "', stts_code='" + nameNode.path("code").asText() + "', message='" + nameNode.path("message").asText() + "' where taskid='6' and no_rawat='" + rs.getString("no_rawat") + "'");
                                            } catch (Exception ex) {
                                                System.out.println("Notifikasi Bridging : " + ex);
                                            }
                                        }
                                    }

                                    if (task7.equals("")) {
                                        String dataResep = "";
                                        String dataValidasi = "";
                                        String isOverlap = "";
                                        String selisih = "";
                                        dataResep = datajam;
                                        dataValidasi = datajam = Sequel.cariIsi("select concat(resep_obat.tgl_perawatan,' ',resep_obat.jam) from resep_obat where resep_obat.tgl_perawatan<>'0000-00-00' and resep_obat.status='ralan' and resep_obat.no_rawat=?", rs.getString("no_rawat"));
                                        isOverlap = Sequel.cariIsi("SELECT IF('" + dataResep + "'>='" + dataValidasi + "','Y','N')");
                                        if (isOverlap.equals("Y") && !dataValidasi.equals("")) {
                                            datajam = Sequel.cariIsi("select DATE_ADD(concat(pemeriksaan_ralan.tgl_perawatan,' ',pemeriksaan_ralan.jam_rawat),interval FLOOR(RAND()*(5-8)+8) minute) from pemeriksaan_ralan where pemeriksaan_ralan.no_rawat=?", rs.getString("no_rawat"));
                                        } else {
                                            datajam = Sequel.cariIsi("select concat(resep_obat.tgl_perawatan,' ',resep_obat.jam) from resep_obat where resep_obat.tgl_perawatan<>'0000-00-00' and resep_obat.status='ralan' and resep_obat.no_rawat=?", rs.getString("no_rawat"));
                                        }
                                        if (!datajam.equals("")) {
                                            Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?,?,?,?", "task id", 6, new String[]{rs.getString("no_rawat"), "7", datajam, "Sudah", "", ""});
                                            parsedDate = dateFormat.parse(datajam);
                                            try {
                                                TeksArea.append("Menjalankan WS taskid validasi resep poli Mobile JKN Pasien Non BPJS/BPS Onsite\n");
                                                headers = new HttpHeaders();
                                                headers.setContentType(MediaType.APPLICATION_JSON);
                                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                headers.add("x-timestamp", utc);
                                                headers.add("x-signature", api.getHmac(utc));
                                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                requestJson = "{"
                                                        + "\"kodebooking\": \"" + rs.getString("no_rawat") + "\","
                                                        + "\"taskid\": \"7\","
                                                        + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                                        + "}";
                                                TeksArea.append("JSON : " + requestJson + "\n");
                                                requestEntity = new HttpEntity(requestJson, headers);
                                                URL = link + "/antrean/updatewaktu";
                                                System.out.println("URL : " + URL);
                                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                nameNode = root.path("metadata");
                                                if (nameNode.path("code").asText().equals("200") || nameNode.path("code").asText().equals("208") || nameNode.path("message").asText().equals("Ok.")) {
                                                    Sequel.queryu2("update referensi_mobilejkn_bpjs_taskid set statuskirim='Sudah' where taskid='7' and no_rawat='" + rs.getString("no_rawat") + "'");
                                                } else {
                                                    Sequel.queryu2("update referensi_mobilejkn_bpjs_taskid set statuskirim='Belum' where taskid='7' and no_rawat='" + rs.getString("no_rawat") + "'");
                                                }
                                                TeksArea.append("respon WS BPJS : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                                                Sequel.queryu2("update referensi_mobilejkn_bpjs_taskid set waktu='" + datajam + "', stts_code='" + nameNode.path("code").asText() + "', message='" + nameNode.path("message").asText() + "' where taskid='7' and no_rawat='" + rs.getString("no_rawat") + "'");
                                            } catch (Exception ex) {
                                                System.out.println("Notifikasi Bridging : " + ex);
                                            }
                                        }
                                    }

                                    if (task99.equals("")) {
                                        datajam = Sequel.cariIsi("select now() from reg_periksa where reg_periksa.stts='Batal' and reg_periksa.no_rawat=?", rs.getString("no_rawat"));
                                        if (!datajam.equals("")) {
                                            Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?,?,?,?", "task id", 6, new String[]{rs.getString("no_rawat"), "99", datajam, "Sudah", "", ""});
                                            parsedDate = dateFormat.parse(datajam);
                                            try {
                                                TeksArea.append("Menjalankan WS taskid batal pelayanan poli Mobile JKN Pasien Non BPJS/BPS Onsite\n");
                                                headers = new HttpHeaders();
                                                headers.setContentType(MediaType.APPLICATION_JSON);
                                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                headers.add("x-timestamp", utc);
                                                headers.add("x-signature", api.getHmac(utc));
                                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                requestJson = "{"
                                                        + "\"kodebooking\": \"" + rs.getString("no_rawat") + "\","
                                                        + "\"taskid\": \"99\","
                                                        + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                                        + "}";
                                                TeksArea.append("JSON : " + requestJson + "\n");
                                                requestEntity = new HttpEntity(requestJson, headers);
                                                URL = link + "/antrean/updatewaktu";
                                                System.out.println("URL : " + URL);
                                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                nameNode = root.path("metadata");
                                                if (nameNode.path("code").asText().equals("200") || nameNode.path("code").asText().equals("208") || nameNode.path("message").asText().equals("Ok.")) {
                                                    Sequel.queryu2("update referensi_mobilejkn_bpjs_taskid set statuskirim='Sudah' where taskid='99' and no_rawat='" + rs.getString("no_rawat") + "'");
                                                } else {
                                                    Sequel.queryu2("update referensi_mobilejkn_bpjs_taskid set statuskirim='Belum' where taskid='99' and no_rawat='" + rs.getString("no_rawat") + "'");
                                                }
                                                TeksArea.append("respon WS BPJS : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                                                Sequel.queryu2("update referensi_mobilejkn_bpjs_taskid set waktu='" + datajam + "', stts_code='" + nameNode.path("code").asText() + "', message='" + nameNode.path("message").asText() + "' where taskid='99' and no_rawat='" + rs.getString("no_rawat") + "'");
                                            } catch (Exception ex) {
                                                System.out.println("Notifikasi Bridging : " + ex);
                                            }
                                        }
                                    }
                                }
                            }
                        } catch (Exception ex) {
                            System.out.println("Notif : " + ex);
                        } finally {
                            if (rs2 != null) {
                                rs2.close();
                            }
                            if (ps2 != null) {
                                ps2.close();
                            }
                        }
                    }
                } catch (Exception ex) {
                    System.out.println("Notif Ketersediaan : " + ex);
                } finally {
                    if (rs != null) {
                        rs.close();
                    }
                    if (ps != null) {
                        ps.close();
                    }
                }

                TeksArea.append("Proses update selesai\n");
            } catch (Exception ez) {
                System.out.println("Notif : " + ez);
            }
        }
    }
}
